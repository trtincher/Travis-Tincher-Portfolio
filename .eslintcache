[{"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/reportWebVitals.js":"1","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/App.js":"2","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/pages/Landing/Landing.js":"3","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/pages/Grid/Grid.js":"4","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/About/About.js":"5","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Quote2/Quote2.js":"6","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/PortDeck/PortDeck.js":"7","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/pages/Portfolio/Portfolio.js":"8","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Card/Card.js":"9","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Skills/Skills.js":"10","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Quote1/Quote1.js":"11"},{"size":362,"mtime":1608044911219,"results":"12","hashOfConfig":"13"},{"size":357,"mtime":1608578404248,"results":"14","hashOfConfig":"13"},{"size":771,"mtime":1608075354433,"results":"15","hashOfConfig":"13"},{"size":607,"mtime":1608075354430,"results":"16","hashOfConfig":"13"},{"size":795,"mtime":1608136290315,"results":"17","hashOfConfig":"13"},{"size":393,"mtime":1608075354413,"results":"18","hashOfConfig":"13"},{"size":2061,"mtime":1608571737672,"results":"19","hashOfConfig":"13"},{"size":400,"mtime":1608304182136,"results":"20","hashOfConfig":"13"},{"size":846,"mtime":1608577458715,"results":"21","hashOfConfig":"13"},{"size":282,"mtime":1608075354415,"results":"22","hashOfConfig":"13"},{"size":359,"mtime":1608075354409,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"h2bfep",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/reportWebVitals.js",[],["49","50"],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/App.js",[],["51","52"],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/pages/Landing/Landing.js",[],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/pages/Grid/Grid.js",[],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/About/About.js",[],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Quote2/Quote2.js",[],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/PortDeck/PortDeck.js",["53"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./PortDeck.scss\";\nimport Card from \"../Card/Card\";\n\n//googlesheet pucblic link https://docs.google.com/spreadsheets/d/18a96rZgz21FoZbbylPt5MaxESkS1ksvzUuyqnab3VKk/edit?usp=sharing\n//sheetAsJSON is how we will pull the data as JSON (javascript object notation)\n//googlesheet JSON template  = https://spreadsheets.google.com/feeds/cells/YOURGOOGLESHEETCODE/SHEETPAGENUMBER/public/full?alt=json\n\nconst sheetAsJSON =\n  \"https://spreadsheets.google.com/feeds/list/18a96rZgz21FoZbbylPt5MaxESkS1ksvzUuyqnab3VKk/od6/public/values?alt=json\";\n\nconst getProjects = async () => {\n  try {\n    let res = await axios.get(sheetAsJSON);\n\n    console.log(\"res in PortLinks\", res);\n    const projects = res.data.feed.entry.map((project) => {\n      return {\n        title: project.gsx$title.$t,\n        description: project.gsx$description.$t,\n        image: project.gsx$image.$t,\n        url: project.gsx$url.$t,\n        github: project.gsx$github.$t,\n        software: project.gsx$software.$t,\n      };\n    });\n    console.log(\"projects in get projects\", projects);\n    return projects;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst makeProjects = (projects) => {\n  const projectCards = projects.map((project) => {\n    console.log(\"project in makeProjects\", project);\n    return (\n      <Card\n        key={project.title}\n        title={project.title}\n        description={project.description}\n        image={project.image}\n        url={project.url}\n        github={project.github}\n        software={project.software}\n      />\n    );\n  });\n\n  return projectCards;\n};\n\nfunction PortDeck() {\n  const [projectList, setProjectList] = useState(\"...loading\");\n\n  useEffect(async () => {\n    let projects = await getProjects();\n    let list = makeProjects(projects);\n    setProjectList(list);\n  }, []);\n\n  console.log(\"projectList\", projectList);\n\n  return (\n    <div className=\"PortDeck\">\n      <div className=\"card_container\">{projectList}</div>\n    </div>\n  );\n}\n\nexport default PortDeck;\n","/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/pages/Portfolio/Portfolio.js",[],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Card/Card.js",["54","55"],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Skills/Skills.js",[],"/Users/travistincher/Desktop/Code/React-Portfolio/travis-tincher-portfolio/src/components/Quote1/Quote1.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"56","replacedBy":"60"},{"ruleId":"58","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":57,"column":13,"nodeType":"64","endLine":61,"endColumn":4},{"ruleId":"65","severity":1,"message":"66","line":10,"column":9,"nodeType":"67","endLine":10,"endColumn":48},{"ruleId":"68","severity":1,"message":"69","line":23,"column":27,"nodeType":"70","endLine":23,"endColumn":42},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],["71"],["72"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]